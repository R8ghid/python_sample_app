name: ci
on:
  # push:
  #   branches: main 
  workflow_dispatch: 

jobs: 
  build:
    runs-on: ubuntu-latest
    env:
      python-version: 3.8
    
    steps:
      - name: Checkout code  
        uses: actions/checkout@v2
      - name: Python ${{ env.python-version }} Setup
        uses: actions/setup-python@v2
        with: 
          python-version: ${{ env.python-version }} 
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Set output
        id: vars
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}    
          
      - name: Build, tag and push image to Amazon ECR
        if: ${{ github.event_name != 'pull_request'}}
        env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY: ecr-one
            IMAGE_TAG: ${{ github.sha }} #commit unique tag 
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.short_ref }}
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.short_ref }}
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.short_ref }}-$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.short_ref }}-$IMAGE_TAG
